<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAA25URm9uWEv/alRHt2pYS/duWEv/alRHd2pURDAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuVETDalRH32pUR9duVEfXblRH725URFAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANuVEQrblRH125YS/9uWEv/blhL/25YR/dqVEUIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblREG2pURDAAAAAAAAAAAAAAAANqVEXLblhL/25YS/9uW
        Ev/blRFSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2pURFNuWEv/blhL/25YS/9uWEv/blRGr35cQAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADalREW2pURn9qVEfHalRH525URx9qVETYAAAAA25YQBNuV
        EdvblhL/25YS/9uVEdXalhFe2pURVNqVETzblREUAAAAAAAAAADalREE25UR6duWEv/blhL/25YS/9uV
        EUYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2pUREtqVEdnblhL/25YS/9uWEv/blhL/2pUR99qV
        EULalRF22pUR/duWEv/blhL/25YS/9uWEv/blhL/25YS/9uVEf/alRHd2pYRk9uVETTblRG125YS/9uW
        Ev/blhL/2pYRLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADalRGL25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/2pUR9dqWEv3blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/2pYS/9qV
        EfnblhL/25YS/9uWEv/alRF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25URAtqVEeHblhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uVEcXalRIY25URRgAAAAAAAAAAAAAAAAAAAADalREW25YR/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/2pUR99qVEbXalREOAAAAAAAAAAAAAAAAAAAAANqV
        ESrblhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/alRH32pURQAAAAAAAAAAAAAAAAAAA
        AAAAAAAA25URKNuWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9qVEZUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADblRIe25YS/9uWEv/blhL/25YS/9uVEbPblRGX2pUR89uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/alRHF2pUREAAA
        AAAAAAAA2pUROtqVETjalRFa25YRetqVEa3blhL/25YS/9uWEv/blRGT25cSAAAAAADalREk2pUR1duW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25UR39qV
        ERYAAAAAAAAAAAAAAADalRHt25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9qVESIAAAAAAAAAAAAA
        AADalREa25UR39uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9qV
        EefalREqAAAAAAAAAAAAAAAAAAAAANuVEcXblhL/25YS/9uWEv/blhL/25YS/9uWEv/alRH1348QAAAA
        AAAAAAAAAAAAAAAAAADalREs2pUR7duWEv/blhL/25YS/9uWEv/alRH12pUR1dqVEfnblhL/25YS/9uW
        Ev/alRHZ2pURKgAAAAAAAAAAAAAAAAAAAAAAAAAA2pURLtqVEbHblRHt25YS/9uWEv/blhL/25YS/9qV
        Eb8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADalRE42pUR5duWEv/alhH92pURn9qVERYAAAAA2pURMNqV
        EcXalhHl25YRidqVEQ4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuWERTalREg2pURgduV
        EcfalRH525URKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblREQ2pYRSNuVESbclRAAAAAAAAAA
        AAAAAAAA2pQQANuWEQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANqVEQjZlRECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////zz//88+//9Pn///b89//m/vf/7v53/8z/M//c/zP/3
        P8z/93/I//J/gf/4f4P//H+D/hw/h/wMAIf4AAAH+AAAA/gAAAH4AAAD+AAAA/gAAAfwcAAPAPgAHwD8
        AD+A/hx/8f////////////////////////8=
</value>
  </data>
</root>